const DeviceAllTemplate = {
	power: {
		read: true,
		write: true,
		name: "Masterpower",
		type: "boolean",
		role: "switch.power",
		def: false,
	},
	anyOn: {
		read: true,
		write: false,
		name: "Any Group is On",
		type: "boolean",
		role: "indicator.state",
		def: false,
	},
};

const DeviceTemplate = {
	power: {
		read: true,
		write: true,
		name: "Power",
		type: "boolean",
		role: "switch.power",
		def: false,
	},
	dimmUp: {
		read: true,
		write: true,
		name: "DimmUp",
		type: "boolean",
		role: "button",
		def: false,
	},
	dimmDown: {
		read: true,
		write: true,
		name: "DimmDown",
		type: "boolean",
		role: "button",
		def: false,
	},
	dimmAmount: {
		read: true,
		write: true,
		name: "Brightnesssteps for dimming",
		type: "number",
		role: "level.brightness",
		def: 10,
		min: 2,
		max: 50,
		unit: "%",
	},
	bri: {
		read: true,
		write: true,
		name: "Brightness",
		type: "number",
		role: "level.brightness",
		def: 100,
		min: 0,
		max: 100,
		unit: "%",
	},
	ct: {
		read: true,
		write: true,
		name: "Colortemperature",
		type: "number",
		role: "level.color.temperature",
		def: 3300,
		min: 2100,
		max: 6500,
		unit: "K",
	},
	color: {
		read: true,
		write: true,
		name: "Color",
		type: "string",
		role: "level.color.rgb",
		def: "#FFFFFF",
	},
	adaptiveBri: {
		read: true,
		write: true,
		name: "Adaptive Brightness",
		type: "boolean",
		role: "switch.enable",
		def: false,
	},
	adaptiveCt: {
		read: true,
		write: true,
		name: "Adaptive Colortemperature",
		type: "boolean",
		role: "switch.enable",
		def: false,
	},
	adaptiveCtMode: {
		read: true,
		write: true,
		name: "Mode for Adaptive Colortemperature",
		type: "string",
		role: "switch.mode",
		def: "solar",
		states: {
			linear: "Linear",
			solar: "Solar",
			solarInterpolated: "Solar interpolated",
			timed: "StartYourDay",
		},
	},
	adaptiveCtTime: {
		read: true,
		write: true,
		name: "Startzeit Adaptive Colortemperature bei Modus: StartYourDay",
		type: "string",
		unit: "Uhr",
		role: "value",
		def: "06:00",
	},
	powerCleaningLight: {
		read: true,
		write: true,
		name: "Power",
		type: "boolean",
		role: "switch.power",
		def: false,
	},
	isMotion: {
		read: true,
		write: false,
		name: "Combines the states of all Sensors for this Group",
		type: "boolean",
		role: "indicator.motion",
		def: false,
	},
	autoOffTimed: {
		enabled: {
			read: true,
			write: true,
			name: "Timecontrolled auto off enabled?",
			type: "boolean",
			role: "switch.enable",
			def: false,
		},
		autoOffTime: {
			read: true,
			write: true,
			name: "Time until auto off",
			type: "number",
			role: "level.timer",
			def: 120,
			min: 0,
			unit: "sek",
		},
		noAutoOffWhenMotion: {
			read: true,
			write: true,
			name: "No timed auto off if motion detected",
			type: "boolean",
			role: "switch",
			def: true,
		},
		noticeEnabled: {
			read: true,
			write: true,
			name: "Notice befroe auto off enabled?",
			type: "boolean",
			role: "switch.enable",
			def: false,
		},
		noticeBri: {
			read: true,
			write: true,
			name: "Brightness of lights when notice before auto off.",
			type: "number",
			role: "level.brightness",
			def: 10,
			min: 0,
			max: 100,
			unit: "%",
		},
		noticeTime: {
			read: true,
			write: true,
			name: "Time notice until auto off",
			type: "number",
			role: "level.timer",
			def: 10,
			min: 0,
			unit: "sek",
		},
	},
	autoOffLux: {
		enabled: {
			read: true,
			write: true,
			name: "Brightness controlled auto off enabled?",
			type: "boolean",
			role: "switch.enable",
			def: false,
		},
		minLux: {
			read: true,
			write: true,
			name: "Brightness for auto off",
			type: "number",
			role: "level.brightness",
			def: 500,
			min: 0,
			unit: "lux",
		},
		dailyLock: {
			read: true,
			write: false,
			name: "Switch lock",
			type: "boolean",
			role: "indicator",
			def: false,
		},
		operator: {
			read: true,
			write: true,
			name: "Should auto off happen if brightness more or less minLux",
			type: "string",
			role: "state",
			def: ">",
		},
	},
	autoOnMotion: {
		enabled: {
			read: true,
			write: true,
			name: "Motion controlled auto on enabled?",
			type: "boolean",
			role: "switch.enable",
			def: false,
		},
		minLux: {
			read: true,
			write: true,
			name: "Brightness for auto on motion",
			type: "number",
			role: "level.brightness",
			def: 300,
			min: 0,
			unit: "lux",
		},
		bri: {
			read: true,
			write: true,
			name: "Brightness of lights when auto on, if empty using groupstandard",
			type: "number",
			role: "level.brightness",
			def: 0,
			min: 0,
			max: 100,
			unit: "%",
		},
		color: {
			read: true,
			write: true,
			name: "Color of lights when auto on, if empty using groupstandard",
			type: "string",
			role: "level.color.rgb",
			def: "",
		},
	},
	autoOnLux: {
		enabled: {
			read: true,
			write: true,
			name: "Brightness controlled auto on enabled?",
			type: "boolean",
			role: "switch.enable",
			def: false,
		},
		minLux: {
			read: true,
			write: true,
			name: "Brightness for auto on",
			type: "number",
			role: "level.brightness",
			def: 50,
			min: 0,
			unit: "lux",
		},
		bri: {
			read: true,
			write: true,
			name: "Brightness of lights when auto on, if empty using groupstandard",
			type: "number",
			role: "level.brightness",
			def: 0,
			min: 0,
			max: 100,
			unit: "%",
		},
		color: {
			read: true,
			write: true,
			name: "Color of lights when auto on, if empty using groupstandard",
			type: "string",
			role: "level.color.rgb",
			def: "",
		},
		switchOnlyWhenPresence: {
			read: true,
			write: true,
			name: "Switch only if there is somebody at home?",
			type: "boolean",
			role: "switch",
			def: true,
		},
		switchOnlyWhenNoPresence: {
			read: true,
			write: true,
			name: "Switch only if there is nobody at home?",
			type: "boolean",
			role: "switch",
			def: false,
		},
		dailyLock: {
			read: true,
			write: false,
			name: "Switch lock",
			type: "boolean",
			role: "indicator",
			def: false,
		},
		operator: {
			read: true,
			write: true,
			name: "Should auto on happen if brightness more or less minLux",
			type: "string",
			role: "state",
			def: "<",
		},
	},
	autoOnPresenceIncrease: {
		enabled: {
			read: true,
			write: true,
			name: "Presence controlled auto on enabled?",
			type: "boolean",
			role: "switch.enable",
			def: false,
		},
		minLux: {
			read: true,
			write: true,
			name: "Necessary brightness for auto on",
			type: "number",
			role: "level.brightness",
			def: 50,
			min: 0,
			unit: "lux",
		},
		bri: {
			read: true,
			write: true,
			name: "Brightness of lights when auto on, if empty using groupstandard",
			type: "number",
			role: "level.brightness",
			def: 0,
			max: 100,
			min: 0,
			unit: "%",
		},
		color: {
			read: true,
			write: true,
			name: "Color of lights when auto on, if empty using groupstandard",
			type: "string",
			role: "level.color.rgb",
			def: "",
		},
	},
	rampOn: {
		enabled: {
			read: true,
			write: true,
			name: "Ramping on enabled?",
			type: "boolean",
			role: "switch.enable",
			def: false,
		},
		time: {
			read: true,
			write: true,
			name: "Time in seconds for ramping on duration",
			type: "number",
			role: "level",
			def: 10,
			min: 0,
			unit: "sec",
		},
		switchOutletsLast: {
			read: true,
			write: true,
			name: "Switch outlets after ramping?",
			type: "boolean",
			role: "switch.enable",
			def: true,
		},
	},
	rampOff: {
		enabled: {
			read: true,
			write: true,
			name: "Ramping off enabled?",
			type: "boolean",
			role: "switch.enable",
			def: false,
		},
		time: {
			read: true,
			write: true,
			name: "Time in seconds for ramping off duration",
			type: "number",
			role: "level",
			def: 10,
			min: 0,
			unit: "sec",
		},
		switchOutletsLast: {
			read: true,
			write: true,
			name: "Switch outlets after ramping?",
			type: "boolean",
			role: "switch.enable",
			def: false,
		},
	},
	blink: {
		enabled: {
			read: true,
			write: true,
			name: "Blinking enabled?",
			type: "boolean",
			role: "button.start",
			def: false,
		},
		frequency: {
			read: true,
			write: true,
			name: "Blink frequency in seconds",
			type: "number",
			role: "level",
			def: 1,
			min: 1,
			unit: "sek",
		},
		blinks: {
			read: true,
			write: true,
			name: "How many blinks at activation?",
			type: "number",
			role: "level",
			def: 3,
			min: 1,
		},
		bri: {
			read: true,
			write: true,
			name: "Brightness of lights when blinking, if empty using groupstandard",
			type: "number",
			role: "level.brightness",
			def: 100,
			max: 100,
			min: 0,
			unit: "%",
		},
		color: {
			read: true,
			write: true,
			name: "Color of lights when blinking, if empty using groupstandard",
			type: "string",
			role: "level.color.rgb",
			def: "#FF0000",
		},
	},
};

module.exports = {
	DeviceTemplate,
	DeviceAllTemplate,
};
